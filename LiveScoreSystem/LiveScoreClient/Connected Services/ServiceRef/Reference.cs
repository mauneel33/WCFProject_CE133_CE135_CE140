//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveScoreClient.ServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.ILiveScoreService")]
    public interface ILiveScoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertPlayer", ReplyAction="http://tempuri.org/ILiveScoreService/insertPlayerResponse")]
        void insertPlayer(LiveScoreSystem.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertPlayer", ReplyAction="http://tempuri.org/ILiveScoreService/insertPlayerResponse")]
        System.Threading.Tasks.Task insertPlayerAsync(LiveScoreSystem.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertTeam", ReplyAction="http://tempuri.org/ILiveScoreService/insertTeamResponse")]
        int insertTeam(LiveScoreSystem.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertTeam", ReplyAction="http://tempuri.org/ILiveScoreService/insertTeamResponse")]
        System.Threading.Tasks.Task<int> insertTeamAsync(LiveScoreSystem.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertMatch", ReplyAction="http://tempuri.org/ILiveScoreService/insertMatchResponse")]
        int insertMatch(LiveScoreSystem.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertMatch", ReplyAction="http://tempuri.org/ILiveScoreService/insertMatchResponse")]
        System.Threading.Tasks.Task<int> insertMatchAsync(LiveScoreSystem.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertCommentary", ReplyAction="http://tempuri.org/ILiveScoreService/insertCommentaryResponse")]
        void insertCommentary(LiveScoreSystem.Commentary comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/insertCommentary", ReplyAction="http://tempuri.org/ILiveScoreService/insertCommentaryResponse")]
        System.Threading.Tasks.Task insertCommentaryAsync(LiveScoreSystem.Commentary comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTeamName", ReplyAction="http://tempuri.org/ILiveScoreService/getTeamNameResponse")]
        string getTeamName(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTeamName", ReplyAction="http://tempuri.org/ILiveScoreService/getTeamNameResponse")]
        System.Threading.Tasks.Task<string> getTeamNameAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getMatchTitle", ReplyAction="http://tempuri.org/ILiveScoreService/getMatchTitleResponse")]
        string getMatchTitle(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getMatchTitle", ReplyAction="http://tempuri.org/ILiveScoreService/getMatchTitleResponse")]
        System.Threading.Tasks.Task<string> getMatchTitleAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateToss", ReplyAction="http://tempuri.org/ILiveScoreService/updateTossResponse")]
        void updateToss(int matchid, int batfirstid, string tosscom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateToss", ReplyAction="http://tempuri.org/ILiveScoreService/updateTossResponse")]
        System.Threading.Tasks.Task updateTossAsync(int matchid, int batfirstid, string tosscom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTossCom", ReplyAction="http://tempuri.org/ILiveScoreService/getTossComResponse")]
        string getTossCom(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTossCom", ReplyAction="http://tempuri.org/ILiveScoreService/getTossComResponse")]
        System.Threading.Tasks.Task<string> getTossComAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTeamDetails", ReplyAction="http://tempuri.org/ILiveScoreService/getTeamDetailsResponse")]
        LiveScoreSystem.Team getTeamDetails(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getTeamDetails", ReplyAction="http://tempuri.org/ILiveScoreService/getTeamDetailsResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Team> getTeamDetailsAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getPlayerDetails", ReplyAction="http://tempuri.org/ILiveScoreService/getPlayerDetailsResponse")]
        LiveScoreSystem.Player getPlayerDetails(int playerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getPlayerDetails", ReplyAction="http://tempuri.org/ILiveScoreService/getPlayerDetailsResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Player> getPlayerDetailsAsync(int playerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getNextBatsmans", ReplyAction="http://tempuri.org/ILiveScoreService/getNextBatsmansResponse")]
        LiveScoreSystem.Player[] getNextBatsmans(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getNextBatsmans", ReplyAction="http://tempuri.org/ILiveScoreService/getNextBatsmansResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getNextBatsmansAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getOpeners", ReplyAction="http://tempuri.org/ILiveScoreService/getOpenersResponse")]
        LiveScoreSystem.Player[] getOpeners(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getOpeners", ReplyAction="http://tempuri.org/ILiveScoreService/getOpenersResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getOpenersAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getBowlers", ReplyAction="http://tempuri.org/ILiveScoreService/getBowlersResponse")]
        LiveScoreSystem.Player[] getBowlers(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getBowlers", ReplyAction="http://tempuri.org/ILiveScoreService/getBowlersResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getBowlersAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateBall", ReplyAction="http://tempuri.org/ILiveScoreService/updateBallResponse")]
        double updateBall(int batteamid, int bowlteamid, int strikerid, int nonstriker, int bowlerid, int runonball, int balltype, int wickettype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateBall", ReplyAction="http://tempuri.org/ILiveScoreService/updateBallResponse")]
        System.Threading.Tasks.Task<double> updateBallAsync(int batteamid, int bowlteamid, int strikerid, int nonstriker, int bowlerid, int runonball, int balltype, int wickettype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateTeamOver", ReplyAction="http://tempuri.org/ILiveScoreService/updateTeamOverResponse")]
        void updateTeamOver(double overs, int batteamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateTeamOver", ReplyAction="http://tempuri.org/ILiveScoreService/updateTeamOverResponse")]
        System.Threading.Tasks.Task updateTeamOverAsync(double overs, int batteamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateBowlOver", ReplyAction="http://tempuri.org/ILiveScoreService/updateBowlOverResponse")]
        void updateBowlOver(double overs, int bowlerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateBowlOver", ReplyAction="http://tempuri.org/ILiveScoreService/updateBowlOverResponse")]
        System.Threading.Tasks.Task updateBowlOverAsync(double overs, int bowlerid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateInning", ReplyAction="http://tempuri.org/ILiveScoreService/updateInningResponse")]
        void updateInning(int inning, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateInning", ReplyAction="http://tempuri.org/ILiveScoreService/updateInningResponse")]
        System.Threading.Tasks.Task updateInningAsync(int inning, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateInningComm", ReplyAction="http://tempuri.org/ILiveScoreService/updateInningCommResponse")]
        void updateInningComm(string inncomm, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateInningComm", ReplyAction="http://tempuri.org/ILiveScoreService/updateInningCommResponse")]
        System.Threading.Tasks.Task updateInningCommAsync(string inncomm, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getInnComment", ReplyAction="http://tempuri.org/ILiveScoreService/getInnCommentResponse")]
        string getInnComment(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getInnComment", ReplyAction="http://tempuri.org/ILiveScoreService/getInnCommentResponse")]
        System.Threading.Tasks.Task<string> getInnCommentAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getInning", ReplyAction="http://tempuri.org/ILiveScoreService/getInningResponse")]
        int getInning(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getInning", ReplyAction="http://tempuri.org/ILiveScoreService/getInningResponse")]
        System.Threading.Tasks.Task<int> getInningAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getMatchOvers", ReplyAction="http://tempuri.org/ILiveScoreService/getMatchOversResponse")]
        int getMatchOvers(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getMatchOvers", ReplyAction="http://tempuri.org/ILiveScoreService/getMatchOversResponse")]
        System.Threading.Tasks.Task<int> getMatchOversAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateWinner", ReplyAction="http://tempuri.org/ILiveScoreService/updateWinnerResponse")]
        void updateWinner(int winnerid, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateWinner", ReplyAction="http://tempuri.org/ILiveScoreService/updateWinnerResponse")]
        System.Threading.Tasks.Task updateWinnerAsync(int winnerid, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateEndComm", ReplyAction="http://tempuri.org/ILiveScoreService/updateEndCommResponse")]
        void updateEndComm(string endcom, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateEndComm", ReplyAction="http://tempuri.org/ILiveScoreService/updateEndCommResponse")]
        System.Threading.Tasks.Task updateEndCommAsync(string endcom, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateEndTime", ReplyAction="http://tempuri.org/ILiveScoreService/updateEndTimeResponse")]
        void updateEndTime(System.DateTime endtime, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/updateEndTime", ReplyAction="http://tempuri.org/ILiveScoreService/updateEndTimeResponse")]
        System.Threading.Tasks.Task updateEndTimeAsync(System.DateTime endtime, int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getCommentary", ReplyAction="http://tempuri.org/ILiveScoreService/getCommentaryResponse")]
        LiveScoreSystem.Commentary[] getCommentary(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getCommentary", ReplyAction="http://tempuri.org/ILiveScoreService/getCommentaryResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Commentary[]> getCommentaryAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/deleteComm", ReplyAction="http://tempuri.org/ILiveScoreService/deleteCommResponse")]
        void deleteComm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/deleteComm", ReplyAction="http://tempuri.org/ILiveScoreService/deleteCommResponse")]
        System.Threading.Tasks.Task deleteCommAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getAllBatsman", ReplyAction="http://tempuri.org/ILiveScoreService/getAllBatsmanResponse")]
        LiveScoreSystem.Player[] getAllBatsman(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getAllBatsman", ReplyAction="http://tempuri.org/ILiveScoreService/getAllBatsmanResponse")]
        System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getAllBatsmanAsync(int teamid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getWinnerId", ReplyAction="http://tempuri.org/ILiveScoreService/getWinnerIdResponse")]
        int getWinnerId(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getWinnerId", ReplyAction="http://tempuri.org/ILiveScoreService/getWinnerIdResponse")]
        System.Threading.Tasks.Task<int> getWinnerIdAsync(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getEndComm", ReplyAction="http://tempuri.org/ILiveScoreService/getEndCommResponse")]
        string getEndComm(int matchid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveScoreService/getEndComm", ReplyAction="http://tempuri.org/ILiveScoreService/getEndCommResponse")]
        System.Threading.Tasks.Task<string> getEndCommAsync(int matchid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveScoreServiceChannel : LiveScoreClient.ServiceRef.ILiveScoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveScoreServiceClient : System.ServiceModel.ClientBase<LiveScoreClient.ServiceRef.ILiveScoreService>, LiveScoreClient.ServiceRef.ILiveScoreService {
        
        public LiveScoreServiceClient() {
        }
        
        public LiveScoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveScoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveScoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveScoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void insertPlayer(LiveScoreSystem.Player player) {
            base.Channel.insertPlayer(player);
        }
        
        public System.Threading.Tasks.Task insertPlayerAsync(LiveScoreSystem.Player player) {
            return base.Channel.insertPlayerAsync(player);
        }
        
        public int insertTeam(LiveScoreSystem.Team team) {
            return base.Channel.insertTeam(team);
        }
        
        public System.Threading.Tasks.Task<int> insertTeamAsync(LiveScoreSystem.Team team) {
            return base.Channel.insertTeamAsync(team);
        }
        
        public int insertMatch(LiveScoreSystem.Match match) {
            return base.Channel.insertMatch(match);
        }
        
        public System.Threading.Tasks.Task<int> insertMatchAsync(LiveScoreSystem.Match match) {
            return base.Channel.insertMatchAsync(match);
        }
        
        public void insertCommentary(LiveScoreSystem.Commentary comment) {
            base.Channel.insertCommentary(comment);
        }
        
        public System.Threading.Tasks.Task insertCommentaryAsync(LiveScoreSystem.Commentary comment) {
            return base.Channel.insertCommentaryAsync(comment);
        }
        
        public string getTeamName(int teamid) {
            return base.Channel.getTeamName(teamid);
        }
        
        public System.Threading.Tasks.Task<string> getTeamNameAsync(int teamid) {
            return base.Channel.getTeamNameAsync(teamid);
        }
        
        public string getMatchTitle(int matchid) {
            return base.Channel.getMatchTitle(matchid);
        }
        
        public System.Threading.Tasks.Task<string> getMatchTitleAsync(int matchid) {
            return base.Channel.getMatchTitleAsync(matchid);
        }
        
        public void updateToss(int matchid, int batfirstid, string tosscom) {
            base.Channel.updateToss(matchid, batfirstid, tosscom);
        }
        
        public System.Threading.Tasks.Task updateTossAsync(int matchid, int batfirstid, string tosscom) {
            return base.Channel.updateTossAsync(matchid, batfirstid, tosscom);
        }
        
        public string getTossCom(int matchid) {
            return base.Channel.getTossCom(matchid);
        }
        
        public System.Threading.Tasks.Task<string> getTossComAsync(int matchid) {
            return base.Channel.getTossComAsync(matchid);
        }
        
        public LiveScoreSystem.Team getTeamDetails(int teamid) {
            return base.Channel.getTeamDetails(teamid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Team> getTeamDetailsAsync(int teamid) {
            return base.Channel.getTeamDetailsAsync(teamid);
        }
        
        public LiveScoreSystem.Player getPlayerDetails(int playerid) {
            return base.Channel.getPlayerDetails(playerid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Player> getPlayerDetailsAsync(int playerid) {
            return base.Channel.getPlayerDetailsAsync(playerid);
        }
        
        public LiveScoreSystem.Player[] getNextBatsmans(int teamid) {
            return base.Channel.getNextBatsmans(teamid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getNextBatsmansAsync(int teamid) {
            return base.Channel.getNextBatsmansAsync(teamid);
        }
        
        public LiveScoreSystem.Player[] getOpeners(int teamid) {
            return base.Channel.getOpeners(teamid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getOpenersAsync(int teamid) {
            return base.Channel.getOpenersAsync(teamid);
        }
        
        public LiveScoreSystem.Player[] getBowlers(int teamid) {
            return base.Channel.getBowlers(teamid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getBowlersAsync(int teamid) {
            return base.Channel.getBowlersAsync(teamid);
        }
        
        public double updateBall(int batteamid, int bowlteamid, int strikerid, int nonstriker, int bowlerid, int runonball, int balltype, int wickettype) {
            return base.Channel.updateBall(batteamid, bowlteamid, strikerid, nonstriker, bowlerid, runonball, balltype, wickettype);
        }
        
        public System.Threading.Tasks.Task<double> updateBallAsync(int batteamid, int bowlteamid, int strikerid, int nonstriker, int bowlerid, int runonball, int balltype, int wickettype) {
            return base.Channel.updateBallAsync(batteamid, bowlteamid, strikerid, nonstriker, bowlerid, runonball, balltype, wickettype);
        }
        
        public void updateTeamOver(double overs, int batteamid) {
            base.Channel.updateTeamOver(overs, batteamid);
        }
        
        public System.Threading.Tasks.Task updateTeamOverAsync(double overs, int batteamid) {
            return base.Channel.updateTeamOverAsync(overs, batteamid);
        }
        
        public void updateBowlOver(double overs, int bowlerid) {
            base.Channel.updateBowlOver(overs, bowlerid);
        }
        
        public System.Threading.Tasks.Task updateBowlOverAsync(double overs, int bowlerid) {
            return base.Channel.updateBowlOverAsync(overs, bowlerid);
        }
        
        public void updateInning(int inning, int matchid) {
            base.Channel.updateInning(inning, matchid);
        }
        
        public System.Threading.Tasks.Task updateInningAsync(int inning, int matchid) {
            return base.Channel.updateInningAsync(inning, matchid);
        }
        
        public void updateInningComm(string inncomm, int matchid) {
            base.Channel.updateInningComm(inncomm, matchid);
        }
        
        public System.Threading.Tasks.Task updateInningCommAsync(string inncomm, int matchid) {
            return base.Channel.updateInningCommAsync(inncomm, matchid);
        }
        
        public string getInnComment(int matchid) {
            return base.Channel.getInnComment(matchid);
        }
        
        public System.Threading.Tasks.Task<string> getInnCommentAsync(int matchid) {
            return base.Channel.getInnCommentAsync(matchid);
        }
        
        public int getInning(int matchid) {
            return base.Channel.getInning(matchid);
        }
        
        public System.Threading.Tasks.Task<int> getInningAsync(int matchid) {
            return base.Channel.getInningAsync(matchid);
        }
        
        public int getMatchOvers(int matchid) {
            return base.Channel.getMatchOvers(matchid);
        }
        
        public System.Threading.Tasks.Task<int> getMatchOversAsync(int matchid) {
            return base.Channel.getMatchOversAsync(matchid);
        }
        
        public void updateWinner(int winnerid, int matchid) {
            base.Channel.updateWinner(winnerid, matchid);
        }
        
        public System.Threading.Tasks.Task updateWinnerAsync(int winnerid, int matchid) {
            return base.Channel.updateWinnerAsync(winnerid, matchid);
        }
        
        public void updateEndComm(string endcom, int matchid) {
            base.Channel.updateEndComm(endcom, matchid);
        }
        
        public System.Threading.Tasks.Task updateEndCommAsync(string endcom, int matchid) {
            return base.Channel.updateEndCommAsync(endcom, matchid);
        }
        
        public void updateEndTime(System.DateTime endtime, int matchid) {
            base.Channel.updateEndTime(endtime, matchid);
        }
        
        public System.Threading.Tasks.Task updateEndTimeAsync(System.DateTime endtime, int matchid) {
            return base.Channel.updateEndTimeAsync(endtime, matchid);
        }
        
        public LiveScoreSystem.Commentary[] getCommentary(int matchid) {
            return base.Channel.getCommentary(matchid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Commentary[]> getCommentaryAsync(int matchid) {
            return base.Channel.getCommentaryAsync(matchid);
        }
        
        public void deleteComm() {
            base.Channel.deleteComm();
        }
        
        public System.Threading.Tasks.Task deleteCommAsync() {
            return base.Channel.deleteCommAsync();
        }
        
        public LiveScoreSystem.Player[] getAllBatsman(int teamid) {
            return base.Channel.getAllBatsman(teamid);
        }
        
        public System.Threading.Tasks.Task<LiveScoreSystem.Player[]> getAllBatsmanAsync(int teamid) {
            return base.Channel.getAllBatsmanAsync(teamid);
        }
        
        public int getWinnerId(int matchid) {
            return base.Channel.getWinnerId(matchid);
        }
        
        public System.Threading.Tasks.Task<int> getWinnerIdAsync(int matchid) {
            return base.Channel.getWinnerIdAsync(matchid);
        }
        
        public string getEndComm(int matchid) {
            return base.Channel.getEndComm(matchid);
        }
        
        public System.Threading.Tasks.Task<string> getEndCommAsync(int matchid) {
            return base.Channel.getEndCommAsync(matchid);
        }
    }
}
